/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.topics;

import Sesion.Cuenta;
import Sesion.User;
import client.ThreadAcordeon;
import database.DAOConcept;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import models.Log;
import topics.models.Concept;

/**
 *
 * @author juan
 */
public class ViewConcepts extends javax.swing.JFrame {

    private ArrayList<Concept> conceptos;
    private ThreadAcordeon thread;
    
    private ViewConcepts(ThreadAcordeon thread) {
        initComponents();
        this.thread = thread;
        getLblIdTopic().setVisible(false);
        setLocation(410, 0);
        setSize(410, 370);
    }

    private static ViewConcepts ventanaConceptos = null;

    public static ViewConcepts obtenerVentanaConceptos(ThreadAcordeon thread) {
        if (ventanaConceptos == null) {
            ventanaConceptos = new ViewConcepts(thread);
            return ventanaConceptos;
        }
        return ventanaConceptos;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaConceptos = new javax.swing.JTable();
        lblTituloTema = new javax.swing.JLabel();
        btnVerConcepto = new javax.swing.JButton();
        btnModificarConcepto = new javax.swing.JButton();
        btnEliminarConcepto = new javax.swing.JButton();
        lblUsuarioLogeado = new javax.swing.JLabel();
        lblIdTopic = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        btnMenuAgregar = new javax.swing.JMenu();
        btnAgregarConcepto = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conceptos");
        setMinimumSize(new java.awt.Dimension(400, 330));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaConceptos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Concepto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaConceptos);
        if (tablaConceptos.getColumnModel().getColumnCount() > 0) {
            tablaConceptos.getColumnModel().getColumn(0).setMinWidth(30);
            tablaConceptos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tablaConceptos.getColumnModel().getColumn(0).setMaxWidth(80);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 57, 366, 200));

        lblTituloTema.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblTituloTema.setText("Título de tema...");
        getContentPane().add(lblTituloTema, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        btnVerConcepto.setText("Ver");
        btnVerConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerConceptoActionPerformed(evt);
            }
        });
        getContentPane().add(btnVerConcepto, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 275, -1, -1));

        btnModificarConcepto.setText("Modificar");
        btnModificarConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarConceptoActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificarConcepto, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 275, -1, -1));

        btnEliminarConcepto.setText("Eliminar");
        btnEliminarConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarConceptoActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminarConcepto, new org.netbeans.lib.awtextra.AbsoluteConstraints(273, 275, -1, -1));

        lblUsuarioLogeado.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(lblUsuarioLogeado, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 122, 18));
        getContentPane().add(lblIdTopic, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 10, 21));

        btnMenuAgregar.setText("Agregar");

        btnAgregarConcepto.setText("Agregar concepto");
        btnAgregarConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarConceptoActionPerformed(evt);
            }
        });
        btnMenuAgregar.add(btnAgregarConcepto);

        jMenuBar1.add(btnMenuAgregar);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerConceptoActionPerformed

        int conceptoSeleccionado = getTablaConceptos().getSelectedRow();
        if (conceptoSeleccionado > -1) {
            try {
                String nombreTema = lblTituloTema.getText();
                int id = conceptos.get(conceptoSeleccionado).getId();
                Concept concept = thread.getManagerConcepts().buscarConcepto(String.valueOf(id));
                if(concept.getBloqueado()==1){
                        JOptionPane.showMessageDialog(this, "En modificación", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    actualizarEstado(concept.getId(), 2);
                    ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).
                            getLblUsuarioLogeado().setText(Cuenta.obtenerCuentaIniciada().getUserName());
                    ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).
                            getLblIdConcept().setText(String.valueOf(concept.getId()));
                    ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).
                            getLblTema().setText("Tema: " + nombreTema);
                    ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).
                            getLblConcepto().setText("Concepto: " + concept.getName());
                    ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).
                            getTxtDefinicion().setText(concept.getDescription());
                    ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).setVisible(true);
                }
            } catch (SQLException ex) {
                Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ha seleccionado un concepto", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnVerConceptoActionPerformed

    
    public static void actualizarEstado(int id, int estado){
        try{
        actualizadorEstado.obtenerAct(id, estado).start();
        }catch(IllegalThreadStateException e){
            
        }
    }
    
    private void btnModificarConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarConceptoActionPerformed

       int conceptoSeleccionado = getTablaConceptos().getSelectedRow();
        if (conceptoSeleccionado > -1) {
            try {
                int id = conceptos.get(conceptoSeleccionado).getId();
                Concept concept = thread.getManagerConcepts().buscarConcepto(String.valueOf(id));
                if (concept.getBloqueado() == 1 || concept.getBloqueado() ==2) {
                    JOptionPane.showMessageDialog(this, concept.getBloqueado()==1?"En modificación":"En visualización", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    DAOConcept accesoConceptos = new DAOConcept();
                    accesoConceptos.actualizarEstado(concept.getId(), 1);
                    ViewModifyConcept.obtenerVentanaModificarConcepto(this.thread).
                            getLblModificarConcepto().setText("Modificar " + concept.getName());
                    ViewModifyConcept.obtenerVentanaModificarConcepto(this.thread).
                            getLblIdConcept().setText(String.valueOf(concept.getId()));
                    ViewModifyConcept.obtenerVentanaModificarConcepto(this.thread).
                            getLblUsuarioLogeado().setText(Cuenta.obtenerCuentaIniciada().getUserName());
                    ViewModifyConcept.obtenerVentanaModificarConcepto(this.thread).
                            getTxtDefinicion().setText(concept.getDescription());
                    ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).setVisible(false);
                    ViewModifyConcept.obtenerVentanaModificarConcepto(this.thread).setVisible(true);
                }
            } catch (SQLException ex) {
                Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ha seleccionado un concepto", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarConceptoActionPerformed

    private void btnEliminarConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarConceptoActionPerformed

        int conceptoSeleccionado = getTablaConceptos().getSelectedRow();

        if (conceptoSeleccionado > -1) {
            try {
                int id = conceptos.get(conceptoSeleccionado).getId();
                Concept concept = thread.getManagerConcepts().buscarConcepto(String.valueOf(id));
                ViewReadConcept.obtenerVentanaLeerConcepto(this.thread).setVisible(false);
                ViewModifyConcept.obtenerVentanaModificarConcepto(this.thread).setVisible(false);
                boolean respuesta = JOptionPane.showConfirmDialog(this, "¿Seguro que desea eliminar " + concept.getName() + "?", "Confirmación", JOptionPane.YES_NO_OPTION) == 0 ? true : false;
                if (respuesta) {
                    try {
                        System.out.println("creo: "+concept.getUserId()+", cuenta: "+Cuenta.obtenerCuentaIniciada().getUserId());
                        if (concept.getUserId() == Cuenta.obtenerCuentaIniciada().getUserId()) {
                            thread.getManagerConcepts().eliminarConcepto(id);
                            JOptionPane.showMessageDialog(this, "Borrado exitoso");
                            ViewConcepts.obtenerVentanaConceptos(this.thread).setVisible(true);
                            Date date = new Date();
                            java.sql.Date datesql = new java.sql.Date(date.getYear(), date.getMonth(), date.getDay());
                            Time time = new Time(date.getHours(), date.getMinutes(), date.getSeconds());
                            Log log = new Log("eliminar", "concepto", datesql, time, Cuenta.obtenerCuentaIniciada().getUserName());
                            thread.getManagerLogs().insertLog(log, Cuenta.obtenerCuentaIniciada().getUserId());
                        } else {
                            JOptionPane.showMessageDialog(this, "No puedes borrar este concepto. No eres quien lo creó.", "Error de permisos", JOptionPane.ERROR_MESSAGE);
                        }
                        ViewTopics.obtenerVentanaTopicos(this.thread).setVisible(respuesta);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No ha seleccionado un concepto", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnEliminarConceptoActionPerformed

    private void btnAgregarConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarConceptoActionPerformed

        ViewAddConcept.obtenerVentanaAniadirConcepto(this.thread).
                getLblAgregarConcepto().setText("Agregar concepto a " + getLblTituloTema().getText());
        ViewAddConcept.obtenerVentanaAniadirConcepto(this.thread).getLblUsuarioLogeado().
                setText(getLblUsuarioLogeado().getText());
        ViewAddConcept.obtenerVentanaAniadirConcepto(this.thread).getLblIdTopic().
                setText(getLblIdTopic().getText());
        ViewAddConcept.obtenerVentanaAniadirConcepto(this.thread).setVisible(true);

    }//GEN-LAST:event_btnAgregarConceptoActionPerformed

    private void cargarConceptos() {
        try {
            conceptos = thread.getManagerConcepts().getConceptsofATopic(Integer.parseInt(getLblIdTopic().getText()));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ViewConcepts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void llenarTablaConceptos(ArrayList<Concept> conceptos) {
        obtenerModeloTabla().setRowCount(0);
        Collections.sort(conceptos);
        for (int numTopico = 0; numTopico < conceptos.size(); numTopico++) {
            obtenerModeloTabla().addRow(new Object[]{
                conceptos.get(numTopico).getId(),
                conceptos.get(numTopico).getName()
            });
        }
        getTablaConceptos().setModel(obtenerModeloTabla());
    }

    private DefaultTableModel obtenerModeloTabla() {
        return (DefaultTableModel) getTablaConceptos().getModel();
    }

    @Override
    public void setVisible(boolean b) {
        if(b){
        cargarConceptos();
        llenarTablaConceptos(conceptos);
        }
        super.setVisible(b);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnAgregarConcepto;
    private javax.swing.JButton btnEliminarConcepto;
    private javax.swing.JMenu btnMenuAgregar;
    private javax.swing.JButton btnModificarConcepto;
    private javax.swing.JButton btnVerConcepto;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIdTopic;
    private javax.swing.JLabel lblTituloTema;
    private javax.swing.JLabel lblUsuarioLogeado;
    private javax.swing.JTable tablaConceptos;
    // End of variables declaration//GEN-END:variables

    public static ViewConcepts getVentanaConceptos() {
        return ventanaConceptos;
    }

    public static void setVentanaConceptos(ViewConcepts ventanaConceptos) {
        ViewConcepts.ventanaConceptos = ventanaConceptos;
    }

    public JMenuItem getBtnAgregarConcepto() {
        return btnAgregarConcepto;
    }

    public void setBtnAgregarConcepto(JMenuItem btnAgregarConcepto) {
        this.btnAgregarConcepto = btnAgregarConcepto;
    }

    public JButton getBtnEliminarConcepto() {
        return btnEliminarConcepto;
    }

    public void setBtnEliminarConcepto(JButton btnEliminarConcepto) {
        this.btnEliminarConcepto = btnEliminarConcepto;
    }

    public JMenu getBtnMenuAgregar() {
        return btnMenuAgregar;
    }

    public void setBtnMenuAgregar(JMenu btnMenuAgregar) {
        this.btnMenuAgregar = btnMenuAgregar;
    }

    public JButton getBtnModificarConcepto() {
        return btnModificarConcepto;
    }

    public void setBtnModificarConcepto(JButton btnModificarConcepto) {
        this.btnModificarConcepto = btnModificarConcepto;
    }

    public JButton getBtnVerConcepto() {
        return btnVerConcepto;
    }

    public void setBtnVerConcepto(JButton btnVerConcepto) {
        this.btnVerConcepto = btnVerConcepto;
    }

    public JMenuBar getjMenuBar1() {
        return jMenuBar1;
    }

    public void setjMenuBar1(JMenuBar jMenuBar1) {
        this.jMenuBar1 = jMenuBar1;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JLabel getLblTituloTema() {
        return lblTituloTema;
    }

    public void setLblTituloTema(JLabel lblTituloTema) {
        this.lblTituloTema = lblTituloTema;
    }

    public JTable getTablaConceptos() {
        return tablaConceptos;
    }

    public void setTablaConceptos(JTable tablaConceptos) {
        this.tablaConceptos = tablaConceptos;
    }

    public JLabel getLblUsuarioLogeado() {
        return lblUsuarioLogeado;
    }

    public void setLblUsuarioLogeado(JLabel lblUsuarioLogeado) {
        this.lblUsuarioLogeado = lblUsuarioLogeado;
    }

    public JLabel getLblIdTopic() {
        return lblIdTopic;
    }

    public void setLblIdTopic(JLabel lblIdTopic) {
        this.lblIdTopic = lblIdTopic;
    }
}
